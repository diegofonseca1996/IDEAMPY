import pandas as pd
import matplotlib as plt
import numpy as np


#Abrir CSV
tabla = pd.read_csv('DFONSECA2911.csv')
df = pd.DataFrame(tabla)
df.reset_index(inplace=True)

#Dividir fechas, aca pues dividi eso para poder sacar el mes y el año
df[['date','hour']] = df['Fecha'].str.split(' ',expand=True)
df[['Year','Month','Day']] = df['date'].str.split('-',expand=True)

#Listas de datos
df.reset_index(inplace=True)
years = df.Year.unique()
months = df.Month.unique()
days = df.Day.unique()
stations = df.NombreEstacion.unique()
data = df[['NombreEstacion','Etiqueta','Valor','Day','Month','Year','Longitud','Latitud','Altitud']]
valores = df.Valor
serie_val = pd.Series(valores)


#series, aca si creo que hice un mierdero, pero es que si los pasaba como listas se demoraba mucho
#entonces encontre que con series es mas rapido y pues si parce ahi si procesaba rapido.
#Aca lo que estoy tratando de hacer es hacer un nuevo dataset que tenga las 5 estaciones todos los años y pues doce meses
#por eso al final me queda un dataset de 5*50años*12, y pues van a quedar resto de datos como null pero no importa porque pues los
#pensaba eliminar con .notna()
#Ahh y una cosa parce la verdad no tengo ni puta idea de como usar eso del reset index, pero del curso que aprendi decian que era como importante
#entonces hahaha lo coloco a la loca 

serie_est = pd.Series(stations)
duplic_est = pd.Series(np.repeat(serie_est.values, len(years)*12))
serie_year = pd.Series(years)
duplic_year = pd.Series(np.repeat(serie_year.values,12))
helpme = duplic_year.to_list()
list_mes=[]
for i in range (len(years)*len(stations)):
    copia = months.copy()
    list_mes.extend(copia)
serie_mes = pd.Series(list_mes)

while len(helpme) < len(duplic_est):
    copy2 = helpme.copy()
    helpme.extend(copy2)

fi_he = pd.Series(helpme)

#New Series
s_est_num = pd.Series(stations)
s_month_num = pd.Series(months)
s_year_num = pd.Series(years)


#new df
#
info_ndf = {'Estacion':duplic_est,'Year':fi_he,'Mes':serie_mes}
ndf= pd.DataFrame(info_ndf)
nndf = ndf[ndf['Estacion'].notna()]
nndf.reset_index(drop=True)

print(nndf)
